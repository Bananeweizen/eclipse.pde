Plugin build.properties
=======================
There is no new variable per se, but there is a pattern of variables:

For every jar file that is being built three variables can be provided. Note 
that "{jarname}" describes the name of the jar file including its path relative 
to the project.

  - a variable named "source.{jarname}" describing where the source of the jar 
can be found. The expected value is a path relative to the project (for 
example "src/").

  - a variable named "output.{jarname}" describing where the bin of the jar can 
be found. The expected value is a path relative to the project (for 
example "bin/").

  - a variable named "extra.{jarname}" describing the list of jars required to 
compile this jar. The expected value are path relative to the place where the 
project is.

So if we look at the examples:
if we are trying to compile a jar called "resources.jar" we'll get:

source.resources.jar=src/
output.resources.jar=bin/

and if we are trying to compile a jar called "resources-ant.jar" contained into
a "lib" directory (jarname equals "lib/resources-ant.jar")

source.lib/resources-ant.jar=src_ant/
output.lib/resources-ant.jar=bin_ant/
extra.lib/resources-ant.jar=../org.apache.ant/ant.jar

For short a way to explain the content of those variables is to see them as 
variables used for the compilation:
  the source indicates where to find the source of the jar
  the extra gives extra values to be put at the end of the classpath when we 
are compiling the source.
  the output indicates where the content of a compiled version of the library 
exists (this is typically used in the classpath of plugins requiring this jar)


Feature build.properties
========================
It is now possible to copy files or directories to the eclipse directory.
This is achieved thanks to 
	root=a comma separated list of files and directories

	to refer to a file prefix the name with "file:"
	to refer to a directory, simply list the name

It is also possible to set permissions on those root files
	root.permissions.XXX=a comma separated list of files and directories
	
	where XXX is a unix chmod style permission description


It is also possible to copy files and apply permissions on a configuration basis
root.configName=
root.configName.permissions.XXX=

where configName is a doted description of the platform.

Here an example for org.eclipse.platform

root=eclipse

root.macosx.carbon.ppc=macosx.carbon,../../plugins/platform-launcher/bin/macosx
root.macosx.carbon.ppc.link=Eclipse.app/Contents/MacOS/eclipse,eclipse
root.macosx.carbon.ppc.permissions.755=Eclipse.app/Contents/MacOS/eclipse



The build.properties can also trigger the generation of source features and plugins

  generate.feature@nameOfTheFeatureToGenerate=featureName, plugin@XXXX

generate a feature called 'nameOfTheFeatureToGenerate' from the plugins contained in 'featureName' and also include the plugin xxxx

Example : generate.feature@org.eclipse.jdt.source=org.eclipse.jdt, plugin@org.eclipse.jdt.doc.isv



Directory file format
=====================
feature|fragment|plugin@elementID=versionName,CVSRepository,passwordInfo,pathInTheRepository (no starting slash)

example:
feature@com.foo=v101,:pserver:anon@foo.com:/home/cvs,,a/b/foo-feature



New script properties
=====================

Base install setting
====================
baseos: The Os of the eclipse installed in baseLocation
basews: The ws of the eclipse installed in baseLocation
basearch: The arch of the eclipse installed in baseLocation


New javac properties
====================
javacSource
javacTarget
javacFailOnError: The value that will be used as a parameter to the failonerror property of the javac ant task
javacDebugInfo: The value that will be used as a parameter to the debuginfo property of the javac ant task
javacVerbose: The value that will be used as a parameter to the verbose property of the javac ant task




Requirements to run standalone
==============================
cvs.exe
zip.exe


Packager map file format
http://bugs.eclipse.org/bugs/show_bug.cgi?id=32242